<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAGBgAAAEACADIBgAAJgAAABgYAAABACAAiAkAAO4GAAAoAAAAGAAAADAAAAABAAgAAAAAAKAC
        AAAAAAAAAAAAAAABAAAAAAAApVIbAPnpxgAAAAAA1p1IAO3GbQDvy3UA+ea0AOm9YQC8cysA+um/AN2x
        awDBdCMAzIo6ANWNFAD347kA1IsUAPfhswDpu1YA3aE1APzz5gD225wA5LFMANqSGwDirEQA9t2eAK9f
        IADw04kA+OOxAN2dKQDoulsA1I8tAPrr0QDXpF0Aq1kUAOGpQADhpjcA/PXtAPvt1AD45scA+eazAPff
        swD225oAvHgxAOO/gQDhpTsAp1YWANOJEQDktVkA+OK3APfgsQDaplYAnEoWANSKGAD02akA4aQ5APDV
        lQDPl04A79KRAPDNfwDovF8A6LtcAOGnPQCfTRYA+u7dAPrv4gDvzHgA4apDAOW0UgD458gA9+PFAO/T
        kgD02qsA2ZYnAO3IcQDVjBoA8M6AALZuJgCrWRUA+u/hAOfIkAD348QA3qI2AOi8cgD46cMA786CAObE
        kADsyXkA9t6oAOe9aADcr2cAuGUXAOS3YgDcni8A3qxWAPPboQDv1aQA89aVAPHQggDVmUIA9+jFAPHX
        mQDmu3UA5bNQALdoIAD568wA8NzAANCRPgD99+0A7cd0ANiUJAD8790A1o4aANipYwCrWR4A+uzWANui
        RAD67dwA0JA4APjlyADgqk8A7dCJAPniqQD77tEA0ZxTAOG4dwDIgCwA57VUAOS0VwDnvloA5Lx6ANub
        NgDpxYMA9tqXAOvJiQDLgRgA7ct8AOS5TQDlsUYAyYxFAMZ7JAD5580AtWIUAL9vFQC0ZB8A37VwAPHS
        hADgpUAA/PbwAOKwOQDipTkA3KpZANiTIQDmuWAAyn8jAL1sHgD33aEA8dy7APLVigDoxokA2ZggANCH
        IgDXlC8A0YgnAPTUgAD78OEA+/HlAPDNdgDHiD8A9NmqANiXOADSl0MA465HAPzz6QD89OsA79KPAOjD
        aQD56MsA6b9mAPrsywD67s4Au20hALNsKADqw3AA6cB2APjlwgD34sMA465MAPbiswD01okAxXcVANmV
        JgDalycA3JooAPLQeADntVMA5rZTAO/NfADuynMA/fr4ANurZgDqv2IA5bBLAOK0TgD447QA36w9AMB9
        OAD779YA47huANegTQDqwGYA89mZAO7FZwDgrVcA8NeWAPPbnADRlT0A15AUAOzJhgDepTYA5K5NAOi+
        aQD24q4A8M56APfixAD13K4A/vjyAP769gDSm1EA1J9WAKpYGADGgjYAr1wfAMKEPQDNgiUAzIYwAMyU
        SgD02qQAq1kSAPvw1ADswmUA8NCEAPvt2wDy04YA/O/ZAOa2VwDhu4AA8tF9AOa8XwDJkUAAzJFGAOO9
        ewDiunwA+ue4APjkugDcnzIA////AAICApKCoR6i6ZmLCwu0Z48Z53EAAAACAgICPRp5Cc5r4SUw1ryj
        wdMRiSMcFr0+AgICNvwUEEQ/QEVHRktBSQdDQhJISg0zAgICNgYUEEQ/QEVHRktBSQdDQhJISg0zAgIC
        NicUEEQ/QEVHRktBSQdDQhJISg0zAgICNgkpEEQ/QFCoOTpBBDtmIhK+Sg0zAgIClbPLuHKsrR8O7GCd
        kWzR9KvaHJ8zAgICIrrZg55PVSt8kArHcCDkezj5+Bk+AgICAtyxW8/6+1kyA2LXdep9C5paje0CAgIC
        fgmb/R8TrYwoZPL2pu8Rq9rAFtgtAgICHRsUEEQ/QEVHRktBSQdDQhJISg9NAgICHRsUEEQ/QEVHRktB
        SQdDQhJISg9NAgICHRsUEEQ/QEVHRktBSQdDQhJISg9NAgICHVMpMSY/Tt81OToFBDtmIv5tNC4hAgIC
        wu4BaG4kk/EBKFcY0hqHtvfKzJTlAgICAi9SZYEr9Qog5OM464qn6M0qKrUCAgICLFTwNzWcaV+Ft1iY
        L3dzqR6gho5NAgICO/wYMLCkpXbgN2HexcjDF1G/bw1NAgICHRsUEEQ/QEVHRktBSQdDQhJISg9NAgIC
        HRsUEEQ/QEVHRktBSQdDQhJISg9NAgICHScUEEQ/QEVHRktBSQdDQhJISg9NAgICHQGEMSZ0Trk1rsQF
        BDwVPVyXDy4hAgICybJ68xPixhMlYw673V7VeFavgIgtAgICAtt/1F2WMtADqmoMDOYqKggITEwCAuAA
        AwDAAAEAwAABAMAAAQDAAAEAwAABAMAAAQDAAAEA4AADAMAAAQDAAAEAwAABAMAAAQDAAAEAwAABAOAA
        AwDAAAEAwAABAMAAAQDAAAEAwAABAMAAAQDAAAEA4AADACgAAAAYAAAAMAAAAAEAIAAAAAAAYAkAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADfojv425s2/9eUL//Ujiv/0Ygn/82CJf/KfyP/xnsk/8N2
        I//AciP/u20h/7doIP+0ZB//sV8g/69cH/+rWR7/p1Uc/6VSG/+iUBn4AAAAAAAAAAAAAAAAAAAAAOGn
        Pf/w04j/+eKp//rov//779b//fft//748v/77NT/+OK3//PbnP/01on/9NSA//LQeP/uxWf/6rxW/+Wx
        Rv/hpzf/3Zwo/9uTGv/FdxX/nk0W/wAAAAAAAAAAAAAAAOGkOv/657f/9tud//fhs//458j/+u7d//rv
        4v/348X/9Nqr/+/Tkv/wzoD/78x4/+3Icf/pvWH/5bRS/+GqQ//doTX/2ZYn/9WMGv/XjhT/nEoW/wAA
        AAAAAAAAAAAAAOGkOf/55rT/9tuc//fhs//458j/+u7d//rv4v/348X/9Nqr/+/Tkv/wzoD/78x4/+3I
        cf/pvWH/5bRS/+GqQ//doTX/2ZYn/9WMGv/VjRT/nEoW/wAAAAAAAAAAAAAAAOGkOf/55rP/9tuc//fh
        s//458j/+u7d//rv4v/348X/9Nqr/+/Tkv/wzoD/78x4/+3Icf/pvWH/5bRS/+GqQ//doTX/2ZYn/9WM
        Gv/VjRT/nEoW/wAAAAAAAAAAAAAAAOGkOP/56L//9tua//fhsv/458f/+u7d//rv4v/348T/9Nmq/+/S
        kf/wzX//78t3/+3Hb//pvGD/5bNR/+GpQf/doDT/2ZUm/9WLGf/VjBT/nEoW/wAAAAAAAAAAAAAAAOKl
        Of/67s7/+OO0//jlwv/67Nb//PPp//z07P/56tH/9uK6//TapP/z1pX/8tWK//HShP/tx3T/6sBm/+a2
        V//irkf/3qU2/9yeKv/ZmCD/nUoV/wAAAAAAAAAAAAAAAOGpQMrjrkz/7MmG/+nFg//oxon/58iQ/+bE
        kP/jvoH/4bh3/9+1cP/dsGn/26tm/9ipY//Wo1z/055W/9GcU//Pl07/zJFG/8mRQP+sXiD/n00WygAA
        AAAAAAAAAAAAAAAAAADovmn/6b9m/+S3Yv/juG7/4717/+K6fP/cr2f/2qVW/9efSP/VmUL/0ZU9/9CQ
        OP/MhjD/yIAs/8FzJP+9bB7/uGUX/7ViFP+rWRL/AAAAAAAAAAAAAAAAAAAAAOe1VP/66r//992h//jk
        uv/669D//PLm//z06//5583/9t6z//HXmf/y04b/8tF9//DNdv/swmX/6LlV/+SuRv/gpTb/3Joo/9iQ
        G//XkBT/p1cW/wAAAAAAAAAAAAAAAOi6XP/447H/9tuc//fhs//458j/+u7d//rv4v/348X/9Nqr/+/T
        kv/wzoD/78x4/+3Icf/pvWH/5bRS/+GqQ//doTX/2ZYn/9WMGv/UixT/q1kV/wAAAAAAAAAAAAAAAOi6
        W//447H/9tuc//fhs//458j/+u7d//rv4v/348X/9Nqr/+/Tkv/wzoD/78x4/+3Icf/pvWH/5bRS/+Gq
        Q//doTX/2ZYn/9WMGv/UixT/q1kV/wAAAAAAAAAAAAAAAOi6W//447D/9tuc//fhs//458j/+u7d//rv
        4v/348X/9Nqr/+/Tkv/wzoD/78x4/+3Icf/pvWH/5bRS/+GqQ//doTX/2ZYn/9WMGv/UixT/q1kV/wAA
        AAAAAAAAAAAAAOi6Wv/46cP/9tqZ//fgsf/45sf/+u7d//rv4f/34sT/9Nmp/+/SkP/wzX7/78t1/+3G
        bv/ovF7/5LNP/+CoQP/cnzL/2JQk/9SKGP/TiRL/q1gU/wAAAAAAAAAAAAAAAOe1U//78NT/+ujG//nr
        zP/8793//PXt//z28P/77dv/+ejH//ffs//23qj/9dye//PZmf/w0or/7ct8/+rDcP/mvF//4rRO/9+s
        Pf/isDn/qlgY/wAAAAAAAAAAAAAAAAAAAADktVn/6Lxy/+a7df/kvHr/4r+B/+G7gP/csW3/16Vd/9Wg
        Vv/Sm1H/z5ZN/8yUSv/JjEX/x4g//8KEPf/AfTj/vHcx/7t5MP+zbCj/AAAAAAAAAAAAAAAAAAAAAOCl
        O8zvzoL/8NCE//DUlf/w2Kb/8dy7//DcwP/u0qH/68mJ/+nAdv/nvWj/5rlg/+O0Wf/gqk//26JE/9iX
        OP/Ujy7/0Ici/8uBGP+/bxX/nUsXzAAAAAAAAAAAAAAAAOi8X//557j/992e//jitv/56Mv/+/Dh//vx
        5f/45cj/9dyu//DVlf/x0IL/8M56/+7Kc//qv2L/5rZT/+KsRP/eojb/2pcn/9aOGv/VjhT/rFoV/wAA
        AAAAAAAAAAAAAOi6W//447H/9tuc//fhs//458j/+u7d//rv4v/348X/9Nqr/+/Tkv/wzoD/78x4/+3I
        cf/pvWH/5bRS/+GqQ//doTX/2ZYn/9WMGv/UixT/q1kV/wAAAAAAAAAAAAAAAOi6W//447H/9tuc//fh
        s//458j/+u7d//rv4v/348X/9Nqr/+/Tkv/wzoD/78x4/+3Icf/pvWH/5bRS/+GqQ//doTX/2ZYn/9WM
        Gv/UixT/q1kV/wAAAAAAAAAAAAAAAOi6W//45bP/9tuc//fhs//458j/+u7d//rv4v/348X/9Nqr/+/T
        kv/wzoD/78x4/+3Icf/pvWH/5bRS/+GqQ//doTX/2ZYn/9WMGv/UixT/q1kV/wAAAAAAAAAAAAAAAOi6
        W//56sb/9tqX//fgsP/45sf/+u3c//rv4f/34sP/9Nmo/+/Sj//vzXz/7st0/+zGbP/ou1z/5LFM/+Cn
        Pf/cni//2JMh/9SJFf/TiRD/q1kU/wAAAAAAAAAAAAAAAOWwS//67Mv/++7R//zv2f/98+b//vr2//36
        +P/88+X/+u3U//foxf/35Lj/9uKz//birv/z26H/8NeW/+3Qif/syXn/6MNp/+e+Wv/kuU3/p1QW/wAA
        AAAAAAAAAAAAAAAAAADjrEj45LRX/+CtV//erFb/3KpZ/9qmVf/XoE3/1ZpI/9KXQ//QkT7/zYw7/8qI
        Of/Ggjb/w34y/8F4MP+9dC3/unEo/7ZuJv+rWxz4AAAAAAAAAADgAAMAwAABAMAAAQDAAAEAwAABAMAA
        AQDAAAEAwAABAOAAAwDAAAEAwAABAMAAAQDAAAEAwAABAMAAAQDgAAMAwAABAMAAAQDAAAEAwAABAMAA
        AQDAAAEAwAABAOAAAwA=
</value>
  </data>
</root>